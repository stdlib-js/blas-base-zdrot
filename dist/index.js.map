{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/zdrot.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar reinterpret = require( '@stdlib/strided-base-reinterpret-complex128' );\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {NonNegativeInteger} offsetX - starting `zx` index\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @param {NonNegativeInteger} offsetY - starting `zy` index\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Complex128Array} `zy`\n*\n* @example\n* var Complex128Array = require( '@stdlib/array-complex128' );\n* var real = require( '@stdlib/complex-real' );\n* var imag = require( '@stdlib/complex-float64-imag' );\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var zy = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* zdrot( zx.length, zx, 1, 0, zy, 1, 0, 0.8, 0.6 );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns ~-0.6\n*\n* var im = imag( z );\n* // returns ~-1.2\n*\n* z = zx.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns ~0.8\n*\n* im = imag( z );\n* // returns ~1.6\n*/\nfunction zdrot( N, zx, strideX, offsetX, zy, strideY, offsetY, c, s ) {\n\tvar viewX;\n\tvar viewY;\n\tvar tmp;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn zy;\n\t}\n\tviewX = reinterpret( zx, 0 );\n\tviewY = reinterpret( zy, 0 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ttmp = ( c*viewX[ ix ] ) + ( s*viewY[ iy ] );\n\t\tviewY[ iy ] = ( c*viewY[ iy ] ) - ( s*viewX[ ix ] );\n\t\tviewX[ ix ] = tmp;\n\n\t\ttmp = ( c*viewX[ ix+1 ] ) + ( s*viewY[ iy+1 ] );\n\t\tviewY[ iy+1 ] = ( c*viewY[ iy+1 ] ) - ( s*viewX[ ix+1 ] );\n\t\tviewX[ ix+1 ] = tmp;\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn zy;\n}\n\n\n// EXPORTS //\n\nmodule.exports = zdrot;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Complex128Array} `zy`\n*\n* @example\n* var Complex128Array = require( '@stdlib/array-complex128' );\n* var real = require( '@stdlib/complex-real' );\n* var imag = require( '@stdlib/complex-float64-imag' );\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var zy = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* zdrot( zx.length, zx, 1, zy, 1, 0.8, 0.6 );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns ~-0.6\n*\n* var im = imag( z );\n* // returns ~-1.2\n*\n* z = zx.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns ~0.8\n*\n* im = imag( z );\n* // returns ~1.6\n*/\nfunction zdrot( N, zx, strideX, zy, strideY, c, s ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, zx, strideX, ix, zy, strideY, iy, c, s );\n}\n\n\n// EXPORTS //\n\nmodule.exports = zdrot;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar zdrot = require( './zdrot.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( zdrot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = zdrot;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to apply a plane rotation.\n*\n* @module @stdlib/blas-base-zdrot\n*\n* @example\n* var Complex128Array = require( '@stdlib/array-complex128' );\n* var real = require( '@stdlib/complex-real' );\n* var imag = require( '@stdlib/complex-float64-imag' );\n* var zdrot = require( '@stdlib/blas-base-zdrot' );\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var zy = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* zdrot( zx.length, zx, 1, zy, 1, 0.8, 0.6 );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns ~-0.6\n*\n* var im = imag( z );\n* // returns ~-1.2\n*\n* z = zx.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns ~0.8\n*\n* im = imag( z );\n* // returns ~1.6\n*\n* @example\n* var Complex128Array = require( '@stdlib/array-complex128' );\n* var real = require( '@stdlib/complex-real' );\n* var imag = require( '@stdlib/complex-float64-imag' );\n* var zdrot = require( '@stdlib/blas-base-zdrot' );\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var zy = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* zdrot.ndarray( zx.length, zx, 1, 0, zy, 1, 0, 0.8, 0.6 );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns ~-0.6\n*\n* var im = imag( z );\n* // returns ~-1.2\n*\n* z = zx.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns ~0.8\n*\n* im = imag( z );\n* // returns ~1.6\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar zdrot;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tzdrot = main;\n} else {\n\tzdrot = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = zdrot;\n\n// exports: { \"ndarray\": \"zdrot.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,6CAA8C,EA+CzE,SAASC,EAAOC,EAAGC,EAAIC,EAASC,EAASC,EAAIC,EAASC,EAASC,EAAGC,EAAI,CACrE,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKhB,GAAK,EACT,OAAOI,EAQR,IANAK,EAAQX,EAAaG,EAAI,CAAE,EAC3BS,EAAQZ,EAAaM,EAAI,CAAE,EAC3BQ,EAAKV,EAAU,EACfW,EAAKR,EAAU,EACfS,EAAKX,EAAU,EACfY,EAAKT,EAAU,EACTU,EAAI,EAAGA,EAAIhB,EAAGgB,IACnBL,EAAQJ,EAAEE,EAAOK,CAAG,EAAQN,EAAEE,EAAOK,CAAG,EACxCL,EAAOK,CAAG,EAAMR,EAAEG,EAAOK,CAAG,EAAQP,EAAEC,EAAOK,CAAG,EAChDL,EAAOK,CAAG,EAAIH,EAEdA,EAAQJ,EAAEE,EAAOK,EAAG,CAAE,EAAQN,EAAEE,EAAOK,EAAG,CAAE,EAC5CL,EAAOK,EAAG,CAAE,EAAMR,EAAEG,EAAOK,EAAG,CAAE,EAAQP,EAAEC,EAAOK,EAAG,CAAE,EACtDL,EAAOK,EAAG,CAAE,EAAIH,EAEhBG,GAAMF,EACNG,GAAMF,EAEP,OAAOT,CACR,CAKAP,EAAO,QAAUE,IC1GjB,IAAAkB,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IA6Cd,SAASC,EAAOC,EAAGC,EAAIC,EAASC,EAAIC,EAASC,EAAGC,EAAI,CACnD,IAAIC,EAAKV,EAAeG,EAAGE,CAAQ,EAC/BM,EAAKX,EAAeG,EAAGI,CAAQ,EACnC,OAAON,EAASE,EAAGC,EAAIC,EAASK,EAAIJ,EAAIC,EAASI,EAAIH,EAAGC,CAAE,CAC3D,CAKAV,EAAO,QAAUG,IC7EjB,IAAAU,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAQ,IACRC,EAAU,IAKdF,EAAaC,EAAO,UAAWC,CAAQ,EAKvCH,EAAO,QAAUE,ICoDjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAQD,EAERC,EAAQC,EAMT,OAAO,QAAUD",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "reinterpret", "zdrot", "N", "zx", "strideX", "offsetX", "zy", "strideY", "offsetY", "c", "s", "viewX", "viewY", "tmp", "sx", "sy", "ix", "iy", "i", "require_zdrot", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "zdrot", "N", "zx", "strideX", "zy", "strideY", "c", "s", "ix", "iy", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "zdrot", "ndarray", "join", "tryRequire", "isError", "main", "zdrot", "tmp"]
}
